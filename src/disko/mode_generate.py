import json
import re
from disko_lib.eval_config import eval_config_dict_as_json
from disko_lib.logging import info
from disko_lib.result import DiskoPartialSuccess, DiskoResult, DiskoError
from disko_lib.generate_config import generate_config
from disko_lib.run_cmd import run
from disko_lib.json_types import JsonDict

DEFAULT_CONFIG_FILE = "disko-config.nix"

HEADER_COMMENT = """
# This file was generated by disko generate
# Some disk and partition names were auto-generated from device attributes
# to be unique, but might not be very descriptive. Feel free to change them
# to something more meaningful.

"""

PARTIAL_FAILURE_COMMENT = """
###############################################################################
# WARNING: This file is incomplete! Some devices failed to generate a config. #
#    Check the logs of the 'disko generate' command for more information.     #
###############################################################################
"""


def filter_internal_keys(d: JsonDict) -> JsonDict:
    return {
        k: (v if not isinstance(v, dict) else filter_internal_keys(v))
        for k, v in d.items()
        if not k.startswith("_")
    }


def run_generate() -> DiskoResult[JsonDict]:
    generate_result = generate_config()

    if isinstance(generate_result, DiskoError) and not isinstance(
        generate_result, DiskoPartialSuccess
    ):
        return generate_result

    config_to_write = filter_internal_keys(generate_result.value)

    evaluate_result = eval_config_dict_as_json(config_to_write)
    if isinstance(evaluate_result, DiskoError):
        # TODO: Add --no-validate flag and explanatory text
        return evaluate_result

    config_as_nix = run(
        [
            "nix",
            "eval",
            "--expr",
            f"builtins.fromJSON(''{json.dumps(config_to_write)}'')",
        ]
    )
    if isinstance(config_as_nix, DiskoError):
        return config_as_nix

    # Contract the main attribute path to a single line to match all the examples
    nix_code = re.sub(r"^\{ disko = \{ devices", "{ disko.devices", config_as_nix.value)
    nix_code = re.sub(r"\}; \}$", "}", nix_code)

    with open(DEFAULT_CONFIG_FILE, "w") as f:
        f.write(HEADER_COMMENT)
        if isinstance(generate_result, DiskoError):
            f.write(PARTIAL_FAILURE_COMMENT)
        f.write(nix_code)
        info(f"Wrote generated config to {DEFAULT_CONFIG_FILE}")

    run(["nixfmt", DEFAULT_CONFIG_FILE])

    return generate_result
